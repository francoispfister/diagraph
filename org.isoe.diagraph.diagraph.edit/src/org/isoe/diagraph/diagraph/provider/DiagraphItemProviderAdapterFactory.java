/**
 */
package org.isoe.diagraph.diagraph.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.isoe.diagraph.diagraph.util.DiagraphAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DiagraphItemProviderAdapterFactory extends DiagraphAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DiagraphItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DNodeItemProvider dNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDNodeAdapter() {
		if (dNodeItemProvider == null) {
			dNodeItemProvider = new DNodeItemProvider(this);
		}

		return dNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DLabeledEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLabeledEdgeItemProvider dLabeledEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DLabeledEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLabeledEdgeAdapter() {
		if (dLabeledEdgeItemProvider == null) {
			dLabeledEdgeItemProvider = new DLabeledEdgeItemProvider(this);
		}

		return dLabeledEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DReferenceItemProvider dReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDReferenceAdapter() {
		if (dReferenceItemProvider == null) {
			dReferenceItemProvider = new DReferenceItemProvider(this);
		}

		return dReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DNestedEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DNestedEdgeItemProvider dNestedEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DNestedEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDNestedEdgeAdapter() {
		if (dNestedEdgeItemProvider == null) {
			dNestedEdgeItemProvider = new DNestedEdgeItemProvider(this);
		}

		return dNestedEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DGraphItemProvider dGraphItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDGraphAdapter() {
		if (dGraphItemProvider == null) {
			dGraphItemProvider = new DGraphItemProvider(this);
		}

		return dGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DCompartmentEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DCompartmentEdgeItemProvider dCompartmentEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DCompartmentEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDCompartmentEdgeAdapter() {
		if (dCompartmentEdgeItemProvider == null) {
			dCompartmentEdgeItemProvider = new DCompartmentEdgeItemProvider(this);
		}

		return dCompartmentEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DPointOfView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DPointOfViewItemProvider dPointOfViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DPointOfView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDPointOfViewAdapter() {
		if (dPointOfViewItemProvider == null) {
			dPointOfViewItemProvider = new DPointOfViewItemProvider(this);
		}

		return dPointOfViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DViewNavigation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DViewNavigationItemProvider dViewNavigationItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DViewNavigation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDViewNavigationAdapter() {
		if (dViewNavigationItemProvider == null) {
			dViewNavigationItemProvider = new DViewNavigationItemProvider(this);
		}

		return dViewNavigationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DAffixedEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DAffixedEdgeItemProvider dAffixedEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DAffixedEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDAffixedEdgeAdapter() {
		if (dAffixedEdgeItemProvider == null) {
			dAffixedEdgeItemProvider = new DAffixedEdgeItemProvider(this);
		}

		return dAffixedEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLabelItemProvider dLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLabelAdapter() {
		if (dLabelItemProvider == null) {
			dLabelItemProvider = new DLabelItemProvider(this);
		}

		return dLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DNavigationEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DNavigationEdgeItemProvider dNavigationEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DNavigationEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDNavigationEdgeAdapter() {
		if (dNavigationEdgeItemProvider == null) {
			dNavigationEdgeItemProvider = new DNavigationEdgeItemProvider(this);
		}

		return dNavigationEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DGeneric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DGenericItemProvider dGenericItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DGeneric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDGenericAdapter() {
		if (dGenericItemProvider == null) {
			dGenericItemProvider = new DGenericItemProvider(this);
		}

		return dGenericItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.isoe.diagraph.diagraph.DContainment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DContainmentItemProvider dContainmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.isoe.diagraph.diagraph.DContainment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDContainmentAdapter() {
		if (dContainmentItemProvider == null) {
			dContainmentItemProvider = new DContainmentItemProvider(this);
		}

		return dContainmentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dNodeItemProvider != null) dNodeItemProvider.dispose();
		if (dLabeledEdgeItemProvider != null) dLabeledEdgeItemProvider.dispose();
		if (dReferenceItemProvider != null) dReferenceItemProvider.dispose();
		if (dNestedEdgeItemProvider != null) dNestedEdgeItemProvider.dispose();
		if (dGraphItemProvider != null) dGraphItemProvider.dispose();
		if (dCompartmentEdgeItemProvider != null) dCompartmentEdgeItemProvider.dispose();
		if (dPointOfViewItemProvider != null) dPointOfViewItemProvider.dispose();
		if (dViewNavigationItemProvider != null) dViewNavigationItemProvider.dispose();
		if (dAffixedEdgeItemProvider != null) dAffixedEdgeItemProvider.dispose();
		if (dLabelItemProvider != null) dLabelItemProvider.dispose();
		if (dNavigationEdgeItemProvider != null) dNavigationEdgeItemProvider.dispose();
		if (dGenericItemProvider != null) dGenericItemProvider.dispose();
		if (dContainmentItemProvider != null) dContainmentItemProvider.dispose();
	}

}
